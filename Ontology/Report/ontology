what is an ontology?
An ontology defines a common vocabulary and a shared understanding. It is an explicit description of a domain's concept, properties and attributes of concepts, constraints on properties and attributes, and individuals.

Ontologies are used to capture knowledge about some domain of interest. An ontology describes the concepts in the domain and also the relationships that hold between those concepts. Di↵erent ontology languages provide di↵erent facilities. The most recent development in standard ontology languages is OWL from the World Wide Web Consortium (W3C)1. Like Prot ́eg ́e, OWL makes it possible to describe concepts but it also provides new facilities. It has a richer set of operators - e.g. intersection, union and negation. It is based on a di↵erent logical model which makes it possible for concepts to be defined as well as described. Complex concepts can therefore be built up in definitions out of simpler concepts. Furthermore, the logical model allows the use of a reasoner which can check whether or not all of the statements and definitions in the ontology are mutually consistent and can also recognise which concepts fit under which definitions. The reasoner can therefore help to maintain the hierarchy correctly. This is particularly useful when dealing with cases where classes can have more than one parent.

An OWL ontology consists of Individuals, Properties, and Classes, which roughly correspond to Prot ́eg ́e frames Instances, Slots and Classes.

Individuals
Individuals, represent objects in the domain in which we are interested 2. An important di↵erence between Prot ́eg ́e and OWL is that OWL does not use the Unique Name Assumption (UNA). This means that two di↵erent names could actually refer to the same individual. For example,
Onotlogy Engineering: Defining terms in the domain and relations among them

why develop ontology?
To share common understanding of the structure of information among ...
To enable reuse of domain knowledge ( to avoid re-inventing the wheel, and to introduce standards to allow interoperability).

An ontology reflects the structure of the world, is often about structure of concepts, actual physical representation is not an issue.

Figure 3.1 shows a representation of some individuals in some domain—in this tutorial we represent individuals as diamonds in diagrams.

Properties are binary relations3 on individuals - i.e. properties link two individuals together4. For example, the property hasSibling might link the individual Matthew to the individual Gemma, or the property hasChild might link the individual Peter to the individual Matthew. Properties can have inverses. For example, the inverse of hasOwner is isOwnedBy. Properties can be limited to having a single value – i.e. to being functional. They can also be either transitive or symmetric. These ‘property characteristics’ are explained in detail in Section 4.8. Figure 3.2 shows a representation of some properties linking some individuals together.

Properties are roughly equivalent to slots in Prot ́eg ́e. They are also known as roles in description logics and relations in UML and other object oriented notions. In GRAIL and some other formalisms they are called attributes.

Classes
OWL classes are interpreted as sets that contain individuals. They are described using formal (math- ematical) descriptions that state precisely the requirements for membership of the class. For example, the class Cat would contain all the individuals that are cats in our domain of interest.5 Classes may be organised into a superclass-subclass hierarchy, which is also known as a taxonomy. Subclasses specialise (‘are subsumed by’) their superclasses. For example consider the classes Animal and Cat – Cat might be a subclass of Animal (so Animal is the superclass of Cat). This says that, ‘All cats are animals’, ‘All members of the class Cat are members of the class Animal’, ‘Being a Cat implies that you’re an Animal’, and ‘Cat is subsumed by Animal’. One of the key features of OWL-DL is that these superclass-subclass relationships (subsumption relationships) can be computed automatically by a reasoner – more on this later. Figure 3.3 shows a representation of some classes containing individuals – classes are represented as circles or ovals, rather like sets in Venn diagrams.

OWL Properties represent relationships. There are two main types of properties, Object properties and Datatype properties. Object properties are relationships between two individuals. 

Object properties link an individual to an individual. OWL also has a third type of property – Annotation properties3. Annotation properties can be used to add information (metadata — data about data) to classes, individuals and object/datatype properties. Figure 4.12 depicts an example of each type of property.

Each object property may have a corresponding inverse property. If some property links individual a to individual b then its inverse property will link individual b to individual a. For example, Figure 4.16 shows the property hasParent and its inverse property hasChild — if Matthew hasParent Jean, then because of the inverse property we can infer that Jean hasChild Matthew.

Datatype properties describe relationships between individuals and data values. Object properties describe relationships between two individuals.
Datatype properties link an individual to an XML Schema Datatype value or an rdf literal. In other words, they describe relationships between an individual and data values. 

OWL allows us to define individuals and to assert properties about them. Individuals can also be used in class descriptions, namely in hasValue restrictions and enumerated classes which will be explained in section 7.2 and section 7.3 respectively. To create individuals in Prot ́eg ́e 4 the ‘Individuals Tab’ is used.
Suppose we wanted to describe the country of origin of various pizza toppings. We would first need to add various ‘countries’ to our ontology. Countries, for example, ‘England’, ‘Italy’, ‘America’, are typically thought of as being individuals (it would be incorrect to have a class England for example, as it’s members would be deemed to be, ‘things that are instances of England’). To create this in our Pizza Ontology we


OWL object property characteristics:
If a property is functional, for a given individual, there can be at most one individual that is related to the individual via the property. 
If a property is inverse functional then it means that the inverse property is functional. 
If a property is transitive, and the property relates individual a to individual b, and also individual b to individual c, then we can infer that individual a is related to individual c via property P. 
If a property P is symmetric, and the property relates individual a to individual b then individual b is also related to individual a via property P.
If a property P is asymmetric, and the property relates individual a to individual b then individual b cannot be related to individual a via property P. 
Reflexive properties
Irreflexive properties

Properties may have a domain and a range specified. Properties link individuals from the domain to individuals from the range. 



how to develop an ontology?
defining concepts in the domain (classes)
arranging the concepts in a hierarchy (subclass-superclass hierarchy) -- I don't have this in project
Defining which attributes and properties (slots) classes can have and constraints on their values
Defining individuals and filling in slot values

what is the domain that the ontology will cover? for what we are going to use the ontology? for what types of questions the information in the ontology should provide answers?
which characteristics should I consider when choosing ...?
what are the terms we need to talk about?
what are the properties of these terms?
what do we want to say about the terms?

enumerat terms... define classes and the class hierarchy... define properties of classes ... valuetype .. value...
The ClassAssertion axiom allows one to state that an individual is an instance of a particular class.
The ObjectPropertyAssertion axiom allows one to state that an individual is connected by an object property expression to an individual
The DataPropertyAssertion axiom allows one to state that an individual is connected by a data property expression to a literal

Individuals in the OWL 2 syntax represent actual objects from the domain. There are two types of individuals in the syntax of OWL 2. Named individuals are given an explicit name that can be used in any ontology to refer to the same object. Anonymous individuals do not have a global name and are thus local to the ontology they are contained in.


The sentence "The individual I is an instance of the class C" can be understood as a statement that I is an instance of the UML class Individual, C is an instance of the UML class Class, and there is an instance of the UML class ClassAssertion that connects I with C. This statement can be captured precisely using the structural specification as ClassAssertion( C I ).

The individual a:Peter can be used to represent a particular person. It can be used in axioms such as the following one:

ClassAssertion( a:Person a:Peter )	Peter is a person.

DataPropertyAssertion( a:hasAge a:Meg "17"^^xsd:double )	Meg is seventeen years old.
The first axiom states that all values of the a:hasAge property must be in the value space of xsd:integer, but the second axiom provides a value for a:hasAge that is equal to the floating-point number 17. Since floating-point numbers are not contained in the value space of xsd:integer, the mentioned ontology is inconsistent.

bjectPropertyAssertion( a:hasBrother a:Chris a:Stewie )	Stewie is a brother of Chris.

http://protege.stanford.edu/publications/ontology_development/ontology101.html

A Practical Guide To Building OWL Ontologies Using Prot ́eg ́e 4 and CO-ODE Tools Edition 1.3
